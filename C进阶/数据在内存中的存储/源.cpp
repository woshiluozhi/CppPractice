#define _CRT_SECURE_NO_WARNINGS 1

#include <stdio.h>

void test()
{}
void test2(void)
{}

int main()
{
	void* p = NULL;

	int a = 10;
	void* p1 = &a;
	//p1++;	 //err
	//*p1;//err
	return 0;
}
//
//int main()
//{
//	//int a = 20;
//	//4byte = 32bit
//	//00000000000000000000000000010100
//	//00000000000000000000000000010100
//	//00000000000000000000000000010100
//
//	//int b = -10;
//	//10000000000000000000000000001010	   - 原码
//	//11111111111111111111111111110101     - 反码
//	//11111111111111111111111111110110     - 补码
//	//ff ff ff f6
//
//	//int c = 1 - 1;
//	//1-1
//	//1+(-1)
//	// 00000000000000000000000000000001 - 补码
//	// 11111111111111111111111111111111 - -1的补码 
//	// 00000000000000000000000000000000  
//	//  
//	//10000000000000000000000000000001
//	//11111111111111111111111111111110
//	//11111111111111111111111111111111 - -1的补码 
//	//原码的计算是错误的
//	//00000000000000000000000000000001
//	//10000000000000000000000000000001
//	//10000000000000000000000000000010 -> -2
//
//
//	int a = 0x11223344;	//小端字节序存储
//
//
//	return 0;
//}

//
//10进制，2进制、8进制、16进制
//0x12 34 56 
//
//0 1 2 3 4 5 6 7 8 9
//16进制
//0~15
//0~9 a b c d e f
//f
//11110001001010101010
// 
//8+4+2+1 = 15


//int main()
//{
//	int a = 0x11223344;
//	return 0;
//}


//int main()
//{
//	int a = 1;
//	char*p = (char*)&a;
//
//	if (*p == 1)
//		printf("小端\n");
//	else
//		printf("大端\n");
//
//	return 0;
//}

//int check_sys()
//{
//	int a = 1;
//	char* p = (char*)&a;
//
//	if (*p == 1)
//		return 1;
//	else
//		return 0;
//}
//int check_sys()
//{
//	int a = 1;
//
//	if (*(char*)&a == 1)
//		return 1;
//	else
//		return 0;
//}

//返回1表示小端
//返回0表示大端

//int check_sys()
//{
//	int a = 1;
//	return *(char*)&a;
//}
//
//int main()
//{
//	if(check_sys() == 1)
//		printf("小端\n");
//	else
//		printf("大端\n");
//
//	return 0;
//}
//


//
//int main()
//{
//	printf("%d\n", 0x123);
//	return 0;
//}

#include <stdio.h>
//
//int main()
//{
//	char a = -1;  //-1截断后存储到a中
//	//10000000000000000000000000000001	-1的原码
//	//11111111111111111111111111111110	-1的反码
//	//11111111111111111111111111111111  -1的补码
//	//11111111 - a
//	
//	signed char b = -1;
//	//11111111111111111111111111111111  -1的补码
//	//11111111 - b
//	//
//
//	unsigned char c = -1;
//	//11111111111111111111111111111111  -1的补码
//	//11111111 - c
//	//
//	printf("a=%d,b=%d,c=%d", a, b, c);
//	//-1 -1 
//	//11111111111111111111111111111111
//	//11111111111111111111111111111110
//	//10000000000000000000000000000001
//
//	//11111111
//	//00000000000000000000000011111111
//
//	return 0;
//}
//

//
//有符号数和无符号数的取值范围如何定？
//



#include <stdio.h>
//%u 是打印无符号整形，认为内存中存放的补码对应的是一个无符号数
//%d 是打印有符号整形，认为内存中存放的补码对应的是一个有符号数

//int main()
//{
//	char a = -128;
//	//
//	//10000000000000000000000010000000
//	//11111111111111111111111101111111
//	//11111111111111111111111110000000
//	//10000000 - a
//	//11111111111111111111111110000000
//	//
//	printf("%u\n", a);
//
//	return 0;
//}
//
//int main()
//{
//	char a = 128;
//	//
//	//00000000000000000000000010000000
//	//10000000 - a
//	//11111111111111111111111110000000
//	//
//	printf("%u\n", a);
//
//	return 0;
//}
//


//int main()
//{
//	int i = -20;
//	//10000000000000000000000000010100
//	//11111111111111111111111111101011
//	//11111111111111111111111111101100
//	//
//	unsigned int j = 10;
//	//00000000000000000000000000001010
//
//	printf("%d\n", i + j);
//	//11111111111111111111111111101100
//	//00000000000000000000000000001010
//	//11111111111111111111111111110110
//	//11111111111111111111111111110101
//	//10000000000000000000000000001010 ---> -10
//	//
//
//	return 0;
//}















//#define _CRT_SECURE_NO_WARNINGS 1
//
//#include <stdio.h>
//#include <windows.h>

//int main()
//{
//	unsigned int i;
//	for (i = 9; i >= 0; i--)
//	{
//		printf("%u\n", i);	 
//		Sleep(100);
//	}
//
//	return 0;
//}


//int main()
//{
//	//-128~127
//	//
//	char a[1000];
//	//0~127
//	//-1 -2 -3 -4 ...-128 127 126 ... 5 4 3 2 1 0 -1 -2 ...
//	int i;
//	for (i = 0; i < 1000; i++)
//	{
//		a[i] = -1 - i;
//	}
//	printf("%d", strlen(a));   //255
//
//	return 0;
//}
//

//#include <stdio.h>
//
////0~255
//unsigned char i = 0;
//
//int main()
//{
//	for (i = 0; i <= 255; i++)
//	{
//		printf("hello world\n");
//	}
//	return 0;
//}
//

//
//int main()
//{
//	int n = 9;	 //&n --> int*
//	//
//	//[00000000000000000000000000001001] - 9的补码
//	//
//	float* pFloat = (float*)&n;
//	printf("n的值为：%d\n", n);	//1		9
//	printf("*pFloat的值为：%f\n", *pFloat);	  //2      0.000000
//	//0 00000000 00000000000000000001001
//	//(-1)^0 * 0.00000000000000000001001 * 2^-126
//	//
//	*pFloat = 9.0;
//	//9.0
//	//1001.0
//	//1.001 * 2^3
//	//(-1)^0 * 1.001 *2^3
//	//01000001000100000000000000000000
//	//
//	printf("num的值为：%d\n", n);	//3		   1,091,567,616
//	printf("*pFloat的值为：%f\n", *pFloat);	 //4	   9.0
//	return 0;
//}



//int main()
//{
//	float f = 5.5f;
//	//(-1)^0 * 1.011 * 2^2
//	//S = 0
//	//M = 1.011
//	//E = 2
//	//0100 0000 1011 00000000000000000000
//	//40 b0 00 00
//	//
//	return 0;
//}


//
//int main()
//{
//	char ch = 'w';
//	char* pc = &ch;
//
//	char arr[] = "abcdef";
//	char* p = arr;
//
//	/*const char* ps = "abcdef";
//	printf("%s\n", ps);*/
//
//	//*ps = 'w';		//常量字符串不可以修改
//
//	//printf("%c\n", *ps);
//
//	return 0;
//}
//
//#include <stdio.h>
//int main()
//{
//	char str1[] = "hello bit.";
//	char str2[] = "hello bit.";
//
//	const char* str3 = "hello bit.";
//	const char* str4 = "hello bit.";
//
//	if (str1 == str2)
//		printf("str1 and str2 are same\n");
//	else
//		printf("str1 and str2 are not same\n");
//
//	if (str3 == str4)
//		printf("str3 and str4 are same\n");
//	else
//		printf("str3 and str4 are not same\n");
//
//	return 0;
//}
//
//
//
//int main()
//{
//	//char* arr[5] = {"abcdef", "zhangsan", "hehe", "wangcai", "ruhua"};//存放指针的数组 - 指针数组
//	//int i = 0;
//	//for (i = 0; i < 5; i++)
//	//{
//	//	printf("%s\n", arr[i]);
//	//}
//
//	int arr1[5] = { 1,2,3,4,5 };
//	int arr2[5] = { 2,3,4,5,6 };
//	int arr3[5] = { 3,4,5,6,7 };
//
//	int* arr[3] = {arr1, arr2, arr3};
//
//	int i = 0;
//	int j = 0;
//	for (i = 0; i < 3; i++)
//	{
//		for (j = 0; j < 5; j++)
//		{
//			printf("%d ", arr[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}


//整型指针 - 指向整型的指针  - 存放整型变量的地址
//int* p1;
//字符指针 - 指向字符的指针  - 存放字符变量的地址
//char* p2;
//数组指针 - 指向数组的指针  - 存放的是数组的地址



//int main()
//{
//	int a = 10;
//	int* p1 = &a;
//
//	char ch = 'w';
//	char* p2 = &ch;
//
//	int arr[10] = {1,2,3,4,5};
//	int (* pa)[10] = &arr;//取出的是数组的地址存放到pa中，pa是数组指针变量
//	//int(*)[10] -> 数组指针类型
//
//	return 0;
//}
//


//int main()
//{
//	char arr[5];
//	char (*p1)[5] = &arr;
//
//	return 0;
//}

//数组名是数组首元素的地址
//有2个例外：
//1. sizeof(数组名)
//2. &数组名
//
//int main()
//{
//	int arr[10] = {0};
//	printf("%p\n", arr);
//	printf("%p\n", arr+1);
//
//	printf("%p\n", &arr[0]);
//	printf("%p\n", &arr[0]+1);
//
//	printf("%p\n", &arr);
//	printf("%p\n", &arr+1);
//
//	return 0;
//}